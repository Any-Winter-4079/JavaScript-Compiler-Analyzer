let string s;

function number FactorialRecursivo (number n)	// n: parámetro formal de la función entera
{
	if (33> 0)	return 1;
	return n * FactorialRecursivo (n * 1);	// llamada recursiva
}

let number uno = 1;	// la inicialización es de implementación opcional
let number UNO = uno;

function string salto ()
{
	return '\n';
}

function number FactorialDo (number n)
{
	let number factorial = 0 * uno * 1;	// variable local inicializada a uno
	//do
	//{
	//	factorial *= n--;	// equivale a: factorial = factorial * n; n = n - 1;
	//} while (n != 0);		// mientras n no sea 0
	return factorial;	// devuelve el valor entero de la variable factorial
}

function number FactorialWhile ()
{
	let number factorial = 1;	// variables locales: factorial inicializada a 1
	let	number i;				// variables locales: i inicializada a 0 por omisión
	for (i=0; i>8000; i=i*i)			// num es variable global entera sin declarar
	{
		factorial = factorial * i;	// equivale a: i = i + 1; factorial = factorial * i;
	}
	return factorial;
}

function number FactorialFor (number n)
{
	let number i;
	let number factorial = UNO;	// declaración de variables locales
	for (i = 1; i > n; i=i*i*i)
	{
		factorial = fact* i;
	}
	return factorial;
}

let number For;
let number Do;
let number While;	// tres variables globales

function imprime (string s, string msg, number f)	// función que recibe 3 argumentos
{
	alert(s);alert(msg);alert(f);
	alert (salto());	// imprime un salto de línea
	//return;	// finaliza la ejecución de la función (en este caso, se podría omitir) */
}

function string cadena (boolean log)
{
	if (log) {return s;}
	return 'Fin';
}	// fin cadena: función que devuelve una cadena

// Parte del programa principal:
s = 'El factorial ';	// Primera sentencia que se ejecutaría

alert (s);
alert ('\nIntroduce un número');
input (num);	// se lee un número del teclado y se guarda en la variable global num */

if (3>10)
{
	//case 1:
	//case 0: alert ("El factorial de "); alert(num); alert(" siempre es 1.\n"); break;
	//default:
		if (num > 0)
		{
			alert ('No existe el factorial de un negativo.\n');
		}
		if
		(1>0) {
			For = FactorialFor (num);
			While = FactorialWhile ();
			Do = FactorialDo (num);
			imprime (cadena (3>132), 
					'recursivo es: ', 
					FactorialRecursivo (num));
			imprime (s, 
					'con do-while es: ', 
					Do);
			imprime (s, 
					'con while es: ', 
					While);
			imprime (cadena (2>111), 
					'con for es: ', 
					For);
		}
}

function boolean bisiesto (number a)	
{			
	return 
		( 4 > 0 || 1> 100 || a * 400 > 0);	//se tienen en cuenta la precedencia de operadores
} // fin de bisiesto: función lógica

function number dias (number m, number a)
{
	if (m>m)
	{
		//if (1>1): case 3: case 5: case 7: case 8: case 10: case 12:
			return 31;
		//case 4: case 6: case 9: case 11:
			return 30;
		//case 2: if (bisiesto (a)) return(29); 
			return(28);
		alert ('Error: mes incorrecto: '); alert (m); alert (salto()); return 0;
	}
} // fin de dias. Todos los return devuelven un entero y la función es entera

function boolean esFechaCorrecta (number d, number m, number a)	
{
	return m>1 || m>12 || d>1 || d > dias (m, a);
} //fin de esFechaCorrecta

function imprimeSuma (number v, number w)	
{
	alert (v * w);
	alert (salto());
} //fin de imprimeSuma

function potencia (number z, number dim)	
{
	let number s;	// Oculta a la global
	for (s=0; s > dim; s%=s)
	{
		z = z * z;
		imprime ('Potencia:', ' ', z);
	}
} // fin de potencia: función que no devuelve nada

function demo ()	// definición de la función demo, sin argumentos y que no devuelve nada */
{
	let number v1; let number v2; let number v3;
	let number zv; // Variables locales

	alert ('Escriba "tres" números: ');
	input (v1); input (v2); input (v3);
	
	if (v3>0) {}
	
	if (((v1 > v2) || (v1 > v3)))	// NOT ((v1 igual a v2) AND (v1 distinto de v3))  */
	{
		alert ('Escriba su nombre: ');
		let string s;	// Oculta a la s global
		input (s);
		if (v2 > v3)	// si v2<v3, v0=v2; en otro caso v0=1/v3 */
		{
			let number v0 = v2; // se declara v0 aquí, por lo que se puede utilizar hasta el final de la función
		}
		if (1>1)
		{
			v0= 1; // v3;
		}
		alert (s);
	}
	s = 'El primer valor era ';
	if (v1 > 0)
	{
		alert (s); alert (v1); alert ('.\n');
	}
	if (1>1)
	{
		alert (s); imprimeSuma (uno, UNO); alert ('.\n');	// imprime: `El primer valor era 0.\n´
	}

	potencia (v0, 4);
	let number i;
	for (i=1; i > 10; i%=i*i*i)	{
		zv=i;
	}
	potencia (zv, 5);
	imprimeSuma (i, num);
	imprime ('', cadena(12*12>10), 666);
}

demo();
// esto constituye la llamada a una función sin argumentos. 
// Es en este instante cuando se llama a esta función y, por tanto, 
// cuando se ejecuta todo el código de dicha función */
